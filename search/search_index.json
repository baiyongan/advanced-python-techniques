{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"\u524d\u8a00 \u00b6 To be continued","title":"\u524d\u8a00"},{"location":"#_1","text":"To be continued","title":"\u524d\u8a00"},{"location":"CHANGELOG/","text":"\u53d8\u66f4\u65e5\u5fd7 \u00b6 0.1.0 (2021-06-14) Initial release","title":"Change Log"},{"location":"CHANGELOG/#_1","text":"0.1.0 (2021-06-14) Initial release","title":"\u53d8\u66f4\u65e5\u5fd7"},{"location":"FASTAPI/","text":"FastAPI framework, high performance, easy to learn, fast to code, ready for production Documentation : https://fastapi.tiangolo.com Source Code : https://github.com/tiangolo/fastapi FastAPI is a modern, fast (high-performance), web framework for building APIs with Python 3.6+ based on standard Python type hints. The key features are: Fast : Very high performance, on par with NodeJS and Go (thanks to Starlette and Pydantic). One of the fastest Python frameworks available . Fast to code : Increase the speed to develop features by about 200% to 300%. * Fewer bugs : Reduce about 40% of human (developer) induced errors. * Intuitive : Great editor support. Completion everywhere. Less time debugging. Easy : Designed to be easy to use and learn. Less time reading docs. Short : Minimize code duplication. Multiple features from each parameter declaration. Fewer bugs. Robust : Get production-ready code. With automatic interactive documentation. Standards-based : Based on (and fully compatible with) the open standards for APIs: OpenAPI (previously known as Swagger) and JSON Schema . * estimation based on tests on an internal development team, building production applications. Sponsors \u00b6 Other sponsors Opinions \u00b6 \" [...] I'm using FastAPI a ton these days. [...] I'm actually planning to use it for all of my team's ML services at Microsoft . Some of them are getting integrated into the core Windows product and some Office products. \" Kabir Khan - Microsoft (ref) \" We adopted the FastAPI library to spawn a REST server that can be queried to obtain predictions . [for Ludwig] \" Piero Molino, Yaroslav Dudin, and Sai Sumanth Miryala - Uber (ref) \" Netflix is pleased to announce the open-source release of our crisis management orchestration framework: Dispatch ! [built with FastAPI ] \" Kevin Glisson, Marc Vilanova, Forest Monsen - Netflix (ref) \" I\u2019m over the moon excited about FastAPI . It\u2019s so fun! \" Brian Okken - Python Bytes podcast host (ref) \" Honestly, what you've built looks super solid and polished. In many ways, it's what I wanted Hug to be - it's really inspiring to see someone build that. \" Timothy Crosley - Hug creator (ref) \" If you're looking to learn one modern framework for building REST APIs, check out FastAPI [...] It's fast, easy to use and easy to learn [...] \" \" We've switched over to FastAPI for our APIs [...] I think you'll like it [...] \" Ines Montani - Matthew Honnibal - Explosion AI founders - spaCy creators (ref) - (ref) Typer , the FastAPI of CLIs \u00b6 If you are building a CLI app to be used in the terminal instead of a web API, check out Typer . Typer is FastAPI's little sibling. And it's intended to be the FastAPI of CLIs . \u2328\ufe0f \ud83d\ude80 Requirements \u00b6 Python 3.6+ FastAPI stands on the shoulders of giants: Starlette for the web parts. Pydantic for the data parts. Installation \u00b6 $ pip install fastapi ---> 100% You will also need an ASGI server, for production such as Uvicorn or Hypercorn . $ pip install uvicorn [ standard ] ---> 100% Example \u00b6 Create it \u00b6 Create a file main.py with: from typing import Optional from fastapi import FastAPI app = FastAPI () @app . get ( \"/\" ) def read_root (): return { \"Hello\" : \"World\" } @app . get ( \"/items/ {item_id} \" ) def read_item ( item_id : int , q : Optional [ str ] = None ): return { \"item_id\" : item_id , \"q\" : q } Or use async def ... If your code uses async / await , use async def : from typing import Optional from fastapi import FastAPI app = FastAPI () @app . get ( \"/\" ) async def read_root (): return { \"Hello\" : \"World\" } @app . get ( \"/items/ {item_id} \" ) async def read_item ( item_id : int , q : Optional [ str ] = None ): return { \"item_id\" : item_id , \"q\" : q } Note : If you don't know, check the \"In a hurry?\" section about async and await in the docs . Run it \u00b6 Run the server with: $ uvicorn main:app --reload INFO: Uvicorn running on http://127.0.0.1:8000 (Press CTRL+C to quit) INFO: Started reloader process [28720] INFO: Started server process [28722] INFO: Waiting for application startup. INFO: Application startup complete. About the command uvicorn main:app --reload ... The command uvicorn main:app refers to: main : the file main.py (the Python \"module\"). app : the object created inside of main.py with the line app = FastAPI() . --reload : make the server restart after code changes. Only do this for development. Check it \u00b6 Open your browser at http://127.0.0.1:8000/items/5?q=somequery . You will see the JSON response as: { \"item_id\" : 5 , \"q\" : \"somequery\" } You already created an API that: Receives HTTP requests in the paths / and /items/{item_id} . Both paths take GET operations (also known as HTTP methods ). The path /items/{item_id} has a path parameter item_id that should be an int . The path /items/{item_id} has an optional str query parameter q . Interactive API docs \u00b6 Now go to http://127.0.0.1:8000/docs . You will see the automatic interactive API documentation (provided by Swagger UI ): Alternative API docs \u00b6 And now, go to http://127.0.0.1:8000/redoc . You will see the alternative automatic documentation (provided by ReDoc ): Example upgrade \u00b6 Now modify the file main.py to receive a body from a PUT request. Declare the body using standard Python types, thanks to Pydantic. from typing import Optional from fastapi import FastAPI from pydantic import BaseModel app = FastAPI () class Item ( BaseModel ): name : str price : float is_offer : Optional [ bool ] = None @app . get ( \"/\" ) def read_root (): return { \"Hello\" : \"World\" } @app . get ( \"/items/ {item_id} \" ) def read_item ( item_id : int , q : Optional [ str ] = None ): return { \"item_id\" : item_id , \"q\" : q } @app . put ( \"/items/ {item_id} \" ) def update_item ( item_id : int , item : Item ): return { \"item_name\" : item . name , \"item_id\" : item_id } The server should reload automatically (because you added --reload to the uvicorn command above). Interactive API docs upgrade \u00b6 Now go to http://127.0.0.1:8000/docs . The interactive API documentation will be automatically updated, including the new body: Click on the button \"Try it out\", it allows you to fill the parameters and directly interact with the API: Then click on the \"Execute\" button, the user interface will communicate with your API, send the parameters, get the results and show them on the screen: Alternative API docs upgrade \u00b6 And now, go to http://127.0.0.1:8000/redoc . The alternative documentation will also reflect the new query parameter and body: Recap \u00b6 In summary, you declare once the types of parameters, body, etc. as function parameters. You do that with standard modern Python types. You don't have to learn a new syntax, the methods or classes of a specific library, etc. Just standard Python 3.6+ . For example, for an int : item_id : int or for a more complex Item model: item : Item ...and with that single declaration you get: Editor support, including: Completion. Type checks. Validation of data: Automatic and clear errors when the data is invalid. Validation even for deeply nested JSON objects. Conversion of input data: coming from the network to Python data and types. Reading from: JSON. Path parameters. Query parameters. Cookies. Headers. Forms. Files. Conversion of output data: converting from Python data and types to network data (as JSON): Convert Python types ( str , int , float , bool , list , etc). datetime objects. UUID objects. Database models. ...and many more. Automatic interactive API documentation, including 2 alternative user interfaces: Swagger UI. ReDoc. Coming back to the previous code example, FastAPI will: Validate that there is an item_id in the path for GET and PUT requests. Validate that the item_id is of type int for GET and PUT requests. If it is not, the client will see a useful, clear error. Check if there is an optional query parameter named q (as in http://127.0.0.1:8000/items/foo?q=somequery ) for GET requests. As the q parameter is declared with = None , it is optional. Without the None it would be required (as is the body in the case with PUT ). For PUT requests to /items/{item_id} , Read the body as JSON: Check that it has a required attribute name that should be a str . Check that it has a required attribute price that has to be a float . Check that it has an optional attribute is_offer , that should be a bool , if present. All this would also work for deeply nested JSON objects. Convert from and to JSON automatically. Document everything with OpenAPI, that can be used by: Interactive documentation systems. Automatic client code generation systems, for many languages. Provide 2 interactive documentation web interfaces directly. We just scratched the surface, but you already get the idea of how it all works. Try changing the line with: return { \"item_name\" : item . name , \"item_id\" : item_id } ...from: ... \"item_name\" : item . name ... ...to: ... \"item_price\" : item . price ... ...and see how your editor will auto-complete the attributes and know their types: For a more complete example including more features, see the Tutorial - User Guide . Spoiler alert : the tutorial - user guide includes: Declaration of parameters from other different places as: headers , cookies , form fields and files . How to set validation constraints as maximum_length or regex . A very powerful and easy to use Dependency Injection system. Security and authentication, including support for OAuth2 with JWT tokens and HTTP Basic auth. More advanced (but equally easy) techniques for declaring deeply nested JSON models (thanks to Pydantic). Many extra features (thanks to Starlette) as: WebSockets GraphQL extremely easy tests based on requests and pytest CORS Cookie Sessions ...and more. Performance \u00b6 Independent TechEmpower benchmarks show FastAPI applications running under Uvicorn as one of the fastest Python frameworks available , only below Starlette and Uvicorn themselves (used internally by FastAPI). (*) To understand more about it, see the section Benchmarks . Optional Dependencies \u00b6 Used by Pydantic: ujson - for faster JSON \"parsing\" . email_validator - for email validation. Used by Starlette: requests - Required if you want to use the TestClient . aiofiles - Required if you want to use FileResponse or StaticFiles . jinja2 - Required if you want to use the default template configuration. python-multipart - Required if you want to support form \"parsing\" , with request.form() . itsdangerous - Required for SessionMiddleware support. pyyaml - Required for Starlette's SchemaGenerator support (you probably don't need it with FastAPI). graphene - Required for GraphQLApp support. ujson - Required if you want to use UJSONResponse . Used by FastAPI / Starlette: uvicorn - for the server that loads and serves your application. orjson - Required if you want to use ORJSONResponse . You can install all of these with pip install fastapi[all] . License \u00b6 This project is licensed under the terms of the MIT license.","title":"Backup"},{"location":"FASTAPI/#sponsors","text":"Other sponsors","title":"Sponsors"},{"location":"FASTAPI/#opinions","text":"\" [...] I'm using FastAPI a ton these days. [...] I'm actually planning to use it for all of my team's ML services at Microsoft . Some of them are getting integrated into the core Windows product and some Office products. \" Kabir Khan - Microsoft (ref) \" We adopted the FastAPI library to spawn a REST server that can be queried to obtain predictions . [for Ludwig] \" Piero Molino, Yaroslav Dudin, and Sai Sumanth Miryala - Uber (ref) \" Netflix is pleased to announce the open-source release of our crisis management orchestration framework: Dispatch ! [built with FastAPI ] \" Kevin Glisson, Marc Vilanova, Forest Monsen - Netflix (ref) \" I\u2019m over the moon excited about FastAPI . It\u2019s so fun! \" Brian Okken - Python Bytes podcast host (ref) \" Honestly, what you've built looks super solid and polished. In many ways, it's what I wanted Hug to be - it's really inspiring to see someone build that. \" Timothy Crosley - Hug creator (ref) \" If you're looking to learn one modern framework for building REST APIs, check out FastAPI [...] It's fast, easy to use and easy to learn [...] \" \" We've switched over to FastAPI for our APIs [...] I think you'll like it [...] \" Ines Montani - Matthew Honnibal - Explosion AI founders - spaCy creators (ref) - (ref)","title":"Opinions"},{"location":"FASTAPI/#typer-the-fastapi-of-clis","text":"If you are building a CLI app to be used in the terminal instead of a web API, check out Typer . Typer is FastAPI's little sibling. And it's intended to be the FastAPI of CLIs . \u2328\ufe0f \ud83d\ude80","title":"Typer, the FastAPI of CLIs"},{"location":"FASTAPI/#requirements","text":"Python 3.6+ FastAPI stands on the shoulders of giants: Starlette for the web parts. Pydantic for the data parts.","title":"Requirements"},{"location":"FASTAPI/#installation","text":"$ pip install fastapi ---> 100% You will also need an ASGI server, for production such as Uvicorn or Hypercorn . $ pip install uvicorn [ standard ] ---> 100%","title":"Installation"},{"location":"FASTAPI/#example","text":"","title":"Example"},{"location":"FASTAPI/#create-it","text":"Create a file main.py with: from typing import Optional from fastapi import FastAPI app = FastAPI () @app . get ( \"/\" ) def read_root (): return { \"Hello\" : \"World\" } @app . get ( \"/items/ {item_id} \" ) def read_item ( item_id : int , q : Optional [ str ] = None ): return { \"item_id\" : item_id , \"q\" : q } Or use async def ... If your code uses async / await , use async def : from typing import Optional from fastapi import FastAPI app = FastAPI () @app . get ( \"/\" ) async def read_root (): return { \"Hello\" : \"World\" } @app . get ( \"/items/ {item_id} \" ) async def read_item ( item_id : int , q : Optional [ str ] = None ): return { \"item_id\" : item_id , \"q\" : q } Note : If you don't know, check the \"In a hurry?\" section about async and await in the docs .","title":"Create it"},{"location":"FASTAPI/#run-it","text":"Run the server with: $ uvicorn main:app --reload INFO: Uvicorn running on http://127.0.0.1:8000 (Press CTRL+C to quit) INFO: Started reloader process [28720] INFO: Started server process [28722] INFO: Waiting for application startup. INFO: Application startup complete. About the command uvicorn main:app --reload ... The command uvicorn main:app refers to: main : the file main.py (the Python \"module\"). app : the object created inside of main.py with the line app = FastAPI() . --reload : make the server restart after code changes. Only do this for development.","title":"Run it"},{"location":"FASTAPI/#check-it","text":"Open your browser at http://127.0.0.1:8000/items/5?q=somequery . You will see the JSON response as: { \"item_id\" : 5 , \"q\" : \"somequery\" } You already created an API that: Receives HTTP requests in the paths / and /items/{item_id} . Both paths take GET operations (also known as HTTP methods ). The path /items/{item_id} has a path parameter item_id that should be an int . The path /items/{item_id} has an optional str query parameter q .","title":"Check it"},{"location":"FASTAPI/#interactive-api-docs","text":"Now go to http://127.0.0.1:8000/docs . You will see the automatic interactive API documentation (provided by Swagger UI ):","title":"Interactive API docs"},{"location":"FASTAPI/#alternative-api-docs","text":"And now, go to http://127.0.0.1:8000/redoc . You will see the alternative automatic documentation (provided by ReDoc ):","title":"Alternative API docs"},{"location":"FASTAPI/#example-upgrade","text":"Now modify the file main.py to receive a body from a PUT request. Declare the body using standard Python types, thanks to Pydantic. from typing import Optional from fastapi import FastAPI from pydantic import BaseModel app = FastAPI () class Item ( BaseModel ): name : str price : float is_offer : Optional [ bool ] = None @app . get ( \"/\" ) def read_root (): return { \"Hello\" : \"World\" } @app . get ( \"/items/ {item_id} \" ) def read_item ( item_id : int , q : Optional [ str ] = None ): return { \"item_id\" : item_id , \"q\" : q } @app . put ( \"/items/ {item_id} \" ) def update_item ( item_id : int , item : Item ): return { \"item_name\" : item . name , \"item_id\" : item_id } The server should reload automatically (because you added --reload to the uvicorn command above).","title":"Example upgrade"},{"location":"FASTAPI/#interactive-api-docs-upgrade","text":"Now go to http://127.0.0.1:8000/docs . The interactive API documentation will be automatically updated, including the new body: Click on the button \"Try it out\", it allows you to fill the parameters and directly interact with the API: Then click on the \"Execute\" button, the user interface will communicate with your API, send the parameters, get the results and show them on the screen:","title":"Interactive API docs upgrade"},{"location":"FASTAPI/#alternative-api-docs-upgrade","text":"And now, go to http://127.0.0.1:8000/redoc . The alternative documentation will also reflect the new query parameter and body:","title":"Alternative API docs upgrade"},{"location":"FASTAPI/#recap","text":"In summary, you declare once the types of parameters, body, etc. as function parameters. You do that with standard modern Python types. You don't have to learn a new syntax, the methods or classes of a specific library, etc. Just standard Python 3.6+ . For example, for an int : item_id : int or for a more complex Item model: item : Item ...and with that single declaration you get: Editor support, including: Completion. Type checks. Validation of data: Automatic and clear errors when the data is invalid. Validation even for deeply nested JSON objects. Conversion of input data: coming from the network to Python data and types. Reading from: JSON. Path parameters. Query parameters. Cookies. Headers. Forms. Files. Conversion of output data: converting from Python data and types to network data (as JSON): Convert Python types ( str , int , float , bool , list , etc). datetime objects. UUID objects. Database models. ...and many more. Automatic interactive API documentation, including 2 alternative user interfaces: Swagger UI. ReDoc. Coming back to the previous code example, FastAPI will: Validate that there is an item_id in the path for GET and PUT requests. Validate that the item_id is of type int for GET and PUT requests. If it is not, the client will see a useful, clear error. Check if there is an optional query parameter named q (as in http://127.0.0.1:8000/items/foo?q=somequery ) for GET requests. As the q parameter is declared with = None , it is optional. Without the None it would be required (as is the body in the case with PUT ). For PUT requests to /items/{item_id} , Read the body as JSON: Check that it has a required attribute name that should be a str . Check that it has a required attribute price that has to be a float . Check that it has an optional attribute is_offer , that should be a bool , if present. All this would also work for deeply nested JSON objects. Convert from and to JSON automatically. Document everything with OpenAPI, that can be used by: Interactive documentation systems. Automatic client code generation systems, for many languages. Provide 2 interactive documentation web interfaces directly. We just scratched the surface, but you already get the idea of how it all works. Try changing the line with: return { \"item_name\" : item . name , \"item_id\" : item_id } ...from: ... \"item_name\" : item . name ... ...to: ... \"item_price\" : item . price ... ...and see how your editor will auto-complete the attributes and know their types: For a more complete example including more features, see the Tutorial - User Guide . Spoiler alert : the tutorial - user guide includes: Declaration of parameters from other different places as: headers , cookies , form fields and files . How to set validation constraints as maximum_length or regex . A very powerful and easy to use Dependency Injection system. Security and authentication, including support for OAuth2 with JWT tokens and HTTP Basic auth. More advanced (but equally easy) techniques for declaring deeply nested JSON models (thanks to Pydantic). Many extra features (thanks to Starlette) as: WebSockets GraphQL extremely easy tests based on requests and pytest CORS Cookie Sessions ...and more.","title":"Recap"},{"location":"FASTAPI/#performance","text":"Independent TechEmpower benchmarks show FastAPI applications running under Uvicorn as one of the fastest Python frameworks available , only below Starlette and Uvicorn themselves (used internally by FastAPI). (*) To understand more about it, see the section Benchmarks .","title":"Performance"},{"location":"FASTAPI/#optional-dependencies","text":"Used by Pydantic: ujson - for faster JSON \"parsing\" . email_validator - for email validation. Used by Starlette: requests - Required if you want to use the TestClient . aiofiles - Required if you want to use FileResponse or StaticFiles . jinja2 - Required if you want to use the default template configuration. python-multipart - Required if you want to support form \"parsing\" , with request.form() . itsdangerous - Required for SessionMiddleware support. pyyaml - Required for Starlette's SchemaGenerator support (you probably don't need it with FastAPI). graphene - Required for GraphQLApp support. ujson - Required if you want to use UJSONResponse . Used by FastAPI / Starlette: uvicorn - for the server that loads and serves your application. orjson - Required if you want to use ORJSONResponse . You can install all of these with pip install fastapi[all] .","title":"Optional Dependencies"},{"location":"FASTAPI/#license","text":"This project is licensed under the terms of the MIT license.","title":"License"},{"location":"LICENSE/","text":"License \u00b6 MIT License Copyright (c) 2021 BYA Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"License"},{"location":"LICENSE/#license","text":"MIT License Copyright (c) 2021 BYA Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"License"},{"location":"REFERENCE/","text":"\u53c2\u8003\u8d44\u6599 \u00b6","title":"Reference"},{"location":"REFERENCE/#_1","text":"","title":"\u53c2\u8003\u8d44\u6599"},{"location":"TODOLIST/","text":"\u5f85\u529e\u6e05\u5355 \u00b6","title":"To do list"},{"location":"TODOLIST/#_1","text":"","title":"\u5f85\u529e\u6e05\u5355"},{"location":"part01_direction_and_roadmap/","text":"Index \u00b6 \u7ecf\u9a8c\u5efa\u8bae \u00b6 \u4e0d\u540c\u9886\u57df\u8def\u7ebf \u00b6 \u7f51\u7edc\u722c\u866b \u00b6 \u81ea\u52a8\u5316\u8fd0\u7ef4 \u00b6 Web \u540e\u7aef \u00b6 \u6570\u636e\u5206\u6790 \u00b6 \u673a\u5668\u5b66\u4e60/\u4eba\u5de5\u667a\u80fd \u00b6","title":"Python Roadmap"},{"location":"part01_direction_and_roadmap/#index","text":"","title":"Index"},{"location":"part01_direction_and_roadmap/#_1","text":"","title":"\u7ecf\u9a8c\u5efa\u8bae"},{"location":"part01_direction_and_roadmap/#_2","text":"","title":"\u4e0d\u540c\u9886\u57df\u8def\u7ebf"},{"location":"part01_direction_and_roadmap/#_3","text":"","title":"\u7f51\u7edc\u722c\u866b"},{"location":"part01_direction_and_roadmap/#_4","text":"","title":"\u81ea\u52a8\u5316\u8fd0\u7ef4"},{"location":"part01_direction_and_roadmap/#web","text":"","title":"Web \u540e\u7aef"},{"location":"part01_direction_and_roadmap/#_5","text":"","title":"\u6570\u636e\u5206\u6790"},{"location":"part01_direction_and_roadmap/#_6","text":"","title":"\u673a\u5668\u5b66\u4e60/\u4eba\u5de5\u667a\u80fd"},{"location":"part02_grammar_and_norm/","text":"Index \u00b6 PEP \u00b6 \u7f16\u7801\u89c4\u8303 \u00b6 \u5de5\u7a0b\u8d28\u91cf \u00b6","title":"Python \u8bed\u6cd5\u89c4\u8303"},{"location":"part02_grammar_and_norm/#index","text":"","title":"Index"},{"location":"part02_grammar_and_norm/#pep","text":"","title":"PEP"},{"location":"part02_grammar_and_norm/#_1","text":"","title":"\u7f16\u7801\u89c4\u8303"},{"location":"part02_grammar_and_norm/#_2","text":"","title":"\u5de5\u7a0b\u8d28\u91cf"},{"location":"part03_development_tool/","text":"Index \u00b6 IDE \u00b6 \u7f16\u8f91\u5668 \u00b6 \u7248\u672c\u63a7\u5236 \u00b6","title":"\u5f00\u53d1\u5de5\u5177\u5217\u8868"},{"location":"part03_development_tool/#index","text":"","title":"Index"},{"location":"part03_development_tool/#ide","text":"","title":"IDE"},{"location":"part03_development_tool/#_1","text":"","title":"\u7f16\u8f91\u5668"},{"location":"part03_development_tool/#_2","text":"","title":"\u7248\u672c\u63a7\u5236"},{"location":"part04_module_package_library/","text":"Index \u00b6 \u5e38\u7528\u5185\u7f6e\u5e93 \u00b6 \u5e38\u7528\u7b2c\u4e09\u65b9\u5e93 \u00b6 PyMOTW3 \u00b6 Python Standart Library \u00b6","title":"Python \u6a21\u5757"},{"location":"part04_module_package_library/#index","text":"","title":"Index"},{"location":"part04_module_package_library/#_1","text":"","title":"\u5e38\u7528\u5185\u7f6e\u5e93"},{"location":"part04_module_package_library/#_2","text":"","title":"\u5e38\u7528\u7b2c\u4e09\u65b9\u5e93"},{"location":"part04_module_package_library/#pymotw3","text":"","title":"PyMOTW3"},{"location":"part04_module_package_library/#python-standart-library","text":"","title":"Python Standart Library"},{"location":"part04_module_package_library/chapter01_text/","text":"Library Index \u00b6","title":"Library Index"},{"location":"part04_module_package_library/chapter01_text/#library-index","text":"","title":"Library Index"},{"location":"part04_module_package_library/chapter02_data_structures/","text":"Library Index \u00b6","title":"Library Index"},{"location":"part04_module_package_library/chapter02_data_structures/#library-index","text":"","title":"Library Index"},{"location":"part04_module_package_library/chapter03_algorithms/","text":"Library Index \u00b6","title":"Library Index"},{"location":"part04_module_package_library/chapter03_algorithms/#library-index","text":"","title":"Library Index"},{"location":"part04_module_package_library/chapter03_algorithms/functools/","text":"functools \u2014\u2014 \u64cd\u4f5c\u51fd\u6570\u7684\u5de5\u5177 \u00b6 \u76ee\u7684 \u5bf9\u5176\u4ed6\u51fd\u6570\u8fdb\u884c\u64cd\u4f5c\u7684\u51fd\u6570\u3002functools \u6a21\u5757\u63d0\u4f9b\u4e86\u7528\u4e8e\u8c03\u6574\u6216\u6269\u5c55\u51fd\u6570\u548c\u5176\u4ed6\u53ef\u8c03\u7528\u5bf9\u8c61\u7684\u5de5\u5177\uff0c\u800c\u65e0\u9700\u5b8c\u5168\u91cd\u5199\u5b83\u4eec\u3002 \u88c5\u9970\u5668 \u00b6 \u90e8\u5206\u5bf9\u8c61 \u00b6 \u83b7\u53d6\u51fd\u6570\u5c5e\u6027 \u00b6 \u5176\u4ed6\u53ef\u8c03\u7528\u5bf9\u8c61 \u00b6 \u65b9\u6cd5\u4e0e\u51fd\u6570 \u00b6 \u83b7\u53d6\u88c5\u9970\u5668\u7684\u51fd\u6570\u5c5e\u6027 \u00b6 \u6bd4\u8f83 \u00b6 \u4e30\u5bcc\u7684\u5bf9\u6bd4 \u00b6 \u6574\u7406\u987a\u5e8f \u00b6 \u7f13\u5b58 \u00b6 \u51cf\u5c0f\u6570\u636e\u96c6 \u00b6 \u901a\u7528\u51fd\u6570 \u00b6 \u62d3\u5c55\u9605\u8bfb \u00b6","title":"functools"},{"location":"part04_module_package_library/chapter03_algorithms/functools/#functools","text":"\u76ee\u7684 \u5bf9\u5176\u4ed6\u51fd\u6570\u8fdb\u884c\u64cd\u4f5c\u7684\u51fd\u6570\u3002functools \u6a21\u5757\u63d0\u4f9b\u4e86\u7528\u4e8e\u8c03\u6574\u6216\u6269\u5c55\u51fd\u6570\u548c\u5176\u4ed6\u53ef\u8c03\u7528\u5bf9\u8c61\u7684\u5de5\u5177\uff0c\u800c\u65e0\u9700\u5b8c\u5168\u91cd\u5199\u5b83\u4eec\u3002","title":"functools \u2014\u2014 \u64cd\u4f5c\u51fd\u6570\u7684\u5de5\u5177"},{"location":"part04_module_package_library/chapter03_algorithms/functools/#_1","text":"","title":"\u88c5\u9970\u5668"},{"location":"part04_module_package_library/chapter03_algorithms/functools/#_2","text":"","title":"\u90e8\u5206\u5bf9\u8c61"},{"location":"part04_module_package_library/chapter03_algorithms/functools/#_3","text":"","title":"\u83b7\u53d6\u51fd\u6570\u5c5e\u6027"},{"location":"part04_module_package_library/chapter03_algorithms/functools/#_4","text":"","title":"\u5176\u4ed6\u53ef\u8c03\u7528\u5bf9\u8c61"},{"location":"part04_module_package_library/chapter03_algorithms/functools/#_5","text":"","title":"\u65b9\u6cd5\u4e0e\u51fd\u6570"},{"location":"part04_module_package_library/chapter03_algorithms/functools/#_6","text":"","title":"\u83b7\u53d6\u88c5\u9970\u5668\u7684\u51fd\u6570\u5c5e\u6027"},{"location":"part04_module_package_library/chapter03_algorithms/functools/#_7","text":"","title":"\u6bd4\u8f83"},{"location":"part04_module_package_library/chapter03_algorithms/functools/#_8","text":"","title":"\u4e30\u5bcc\u7684\u5bf9\u6bd4"},{"location":"part04_module_package_library/chapter03_algorithms/functools/#_9","text":"","title":"\u6574\u7406\u987a\u5e8f"},{"location":"part04_module_package_library/chapter03_algorithms/functools/#_10","text":"","title":"\u7f13\u5b58"},{"location":"part04_module_package_library/chapter03_algorithms/functools/#_11","text":"","title":"\u51cf\u5c0f\u6570\u636e\u96c6"},{"location":"part04_module_package_library/chapter03_algorithms/functools/#_12","text":"","title":"\u901a\u7528\u51fd\u6570"},{"location":"part04_module_package_library/chapter03_algorithms/functools/#_13","text":"","title":"\u62d3\u5c55\u9605\u8bfb"},{"location":"part04_module_package_library/chapter04_dates_and_times/","text":"Library Index \u00b6","title":"Library Index"},{"location":"part04_module_package_library/chapter04_dates_and_times/#library-index","text":"","title":"Library Index"},{"location":"part04_module_package_library/chapter05_mathematics/","text":"Library Index \u00b6","title":"Library Index"},{"location":"part04_module_package_library/chapter05_mathematics/#library-index","text":"","title":"Library Index"},{"location":"part04_module_package_library/chapter06_the_file_system/","text":"Library Index \u00b6","title":"Library Index"},{"location":"part04_module_package_library/chapter06_the_file_system/#library-index","text":"","title":"Library Index"},{"location":"part04_module_package_library/chapter07_data_persistence_and_exchange/","text":"Library Index \u00b6","title":"Library Index"},{"location":"part04_module_package_library/chapter07_data_persistence_and_exchange/#library-index","text":"","title":"Library Index"},{"location":"part04_module_package_library/chapter08_data_compression_and_archiving/","text":"Library Index \u00b6","title":"Library Index"},{"location":"part04_module_package_library/chapter08_data_compression_and_archiving/#library-index","text":"","title":"Library Index"},{"location":"part04_module_package_library/chapter09_cryptography/","text":"Library Index \u00b6","title":"Library Index"},{"location":"part04_module_package_library/chapter09_cryptography/#library-index","text":"","title":"Library Index"},{"location":"part04_module_package_library/chapter10_concurrency/","text":"Library Index \u00b6","title":"Library Index"},{"location":"part04_module_package_library/chapter10_concurrency/#library-index","text":"","title":"Library Index"},{"location":"part04_module_package_library/chapter11_networking/","text":"Library Index \u00b6","title":"Library Index"},{"location":"part04_module_package_library/chapter11_networking/#library-index","text":"","title":"Library Index"},{"location":"part04_module_package_library/chapter12_the_internet/","text":"Library Index \u00b6","title":"Library Index"},{"location":"part04_module_package_library/chapter12_the_internet/#library-index","text":"","title":"Library Index"},{"location":"part04_module_package_library/chapter13_email/","text":"Library Index \u00b6","title":"Library Index"},{"location":"part04_module_package_library/chapter13_email/#library-index","text":"","title":"Library Index"},{"location":"part04_module_package_library/chapter14_application_building_blocks/","text":"Library Index \u00b6","title":"Library Index"},{"location":"part04_module_package_library/chapter14_application_building_blocks/#library-index","text":"","title":"Library Index"},{"location":"part04_module_package_library/chapter15_internationalization_and_localization/","text":"Library Index \u00b6","title":"Library Index"},{"location":"part04_module_package_library/chapter15_internationalization_and_localization/#library-index","text":"","title":"Library Index"},{"location":"part04_module_package_library/chapter16_developer_tools/","text":"Library Index \u00b6","title":"Library Index"},{"location":"part04_module_package_library/chapter16_developer_tools/#library-index","text":"","title":"Library Index"},{"location":"part04_module_package_library/chapter17_runtime_features/","text":"Library Index \u00b6","title":"Library Index"},{"location":"part04_module_package_library/chapter17_runtime_features/#library-index","text":"","title":"Library Index"},{"location":"part04_module_package_library/chapter18_language_tools/","text":"Library Index \u00b6","title":"Library Index"},{"location":"part04_module_package_library/chapter18_language_tools/#library-index","text":"","title":"Library Index"},{"location":"part04_module_package_library/chapter19_modules_and_packages/","text":"Library Index \u00b6","title":"Library Index"},{"location":"part04_module_package_library/chapter19_modules_and_packages/#library-index","text":"","title":"Library Index"},{"location":"part04_module_package_library/chapter20_unix_specific_services/","text":"Library Index \u00b6","title":"Library Index"},{"location":"part04_module_package_library/chapter20_unix_specific_services/#library-index","text":"","title":"Library Index"},{"location":"part05_core_topic/chapter01/article0101/","text":"Index \u00b6","title":"python \u4e2d\u7684\u4e00\u5207\u7686\u5bf9\u8c61"},{"location":"part05_core_topic/chapter01/article0101/#index","text":"","title":"Index"},{"location":"part05_core_topic/chapter01/article0102/","text":"Index \u00b6","title":"object\u3001type\u548cclass"},{"location":"part05_core_topic/chapter01/article0102/#index","text":"","title":"Index"},{"location":"part05_core_topic/chapter01/article0103/","text":"Index \u00b6","title":"python \u4e2d\u7684\u5185\u7f6e\u7c7b\u578b"},{"location":"part05_core_topic/chapter01/article0103/#index","text":"","title":"Index"},{"location":"part05_core_topic/chapter01/article0104/","text":"Index \u00b6","title":"\u672c\u7ae0\u5c0f\u7ed3"},{"location":"part05_core_topic/chapter01/article0104/#index","text":"","title":"Index"},{"location":"part05_core_topic/chapter02/article0201/","text":"Index \u00b6","title":"\u9b54\u6cd5\u51fd\u6570\u7b80\u4ecb"},{"location":"part05_core_topic/chapter02/article0201/#index","text":"","title":"Index"},{"location":"part05_core_topic/chapter02/article0202/","text":"","title":"python \u6570\u636e\u6a21\u578b\u5bf9 python \u7684\u5f71\u54cd"},{"location":"part05_core_topic/chapter02/article0203/","text":"","title":"python \u9b54\u6cd5\u51fd\u6570\u4e00\u89c8"},{"location":"part05_core_topic/chapter02/article0204/","text":"","title":"len \u51fd\u6570\u7684\u7279\u6b8a\u6027"},{"location":"part05_core_topic/chapter02/article0205/","text":"","title":"\u672c\u7ae0\u5c0f\u7ed3"},{"location":"part05_core_topic/chapter03/article0301/","text":"Index \u00b6","title":"\u9e2d\u5b50\u7c7b\u578b\u548c\u591a\u6001"},{"location":"part05_core_topic/chapter03/article0301/#index","text":"","title":"Index"},{"location":"part05_core_topic/chapter03/article0302/","text":"","title":"\u62bd\u8c61\u57fa\u7c7b\uff08abc\u6a21\u5757\uff09"},{"location":"part05_core_topic/chapter03/article0303/","text":"","title":"isinstance \u548c type \u7684\u533a\u522b"},{"location":"part05_core_topic/chapter03/article0304/","text":"","title":"\u7c7b\u53d8\u91cf\u548c\u5b9e\u4f8b\u53d8\u91cf"},{"location":"part05_core_topic/chapter03/article0305/","text":"","title":"\u7c7b\u548c\u5b9e\u4f8b\u5c5e\u6027\u7684\u67e5\u627e\u987a\u5e8f"},{"location":"part05_core_topic/chapter03/article0306/","text":"","title":"\u7c7b\u65b9\u6cd5\u3001\u9759\u6001\u65b9\u6cd5\u548c\u5b9e\u4f8b\u65b9\u6cd5"},{"location":"part05_core_topic/chapter03/article0307/","text":"","title":"\u6570\u636e\u5c01\u88c5\u548c\u79c1\u6709\u5c5e\u6027"},{"location":"part05_core_topic/chapter03/article0308/","text":"","title":"python \u5bf9\u8c61\u7684\u81ea\u7701\u673a\u5236"},{"location":"part05_core_topic/chapter03/article0309/","text":"","title":"super \u771f\u7684\u662f\u8c03\u7528\u7236\u7c7b\u4e48\uff1f"},{"location":"part05_core_topic/chapter03/article0310/","text":"","title":"mixin \u7ee7\u627f\u6848\u4f8b\u2014\u2014django rest framework"},{"location":"part05_core_topic/chapter03/article0311/","text":"","title":"python \u4e2d\u7684 with \u8bed\u53e5"},{"location":"part05_core_topic/chapter03/article0312/","text":"","title":"contextlib \u7b80\u5316\u4e0a\u4e0b\u6587\u7ba1\u7406\u5668"},{"location":"part05_core_topic/chapter03/article0313/","text":"","title":"\u672c\u7ae0\u5c0f\u7ed3"},{"location":"part05_core_topic/chapter04/article0401/","text":"Index \u00b6","title":"python \u4e2d\u7684\u5e8f\u5217\u5206\u7c7b"},{"location":"part05_core_topic/chapter04/article0401/#index","text":"","title":"Index"},{"location":"part05_core_topic/chapter04/article0402/","text":"","title":"python \u4e2d\u5e8f\u5217\u7c7b\u578b\u7684 abd \u7ee7\u627f\u5173\u7cfb"},{"location":"part05_core_topic/chapter04/article0403/","text":"","title":"list \u4e2d extend \u65b9\u6cd5\u533a\u522b"},{"location":"part05_core_topic/chapter04/article0404/","text":"","title":"\u5b9e\u73b0\u53ef\u5207\u7247\u7684\u5bf9\u8c61"},{"location":"part05_core_topic/chapter04/article0405/","text":"","title":"bisect \u7ef4\u62a4\u5df2\u6392\u5e8f\u5e8f\u5217"},{"location":"part05_core_topic/chapter04/article0406/","text":"","title":"\u4ec0\u4e48\u65f6\u5019\u4e0d\u5e94\u8be5\u4f7f\u7528\u5217\u8868\uff1f"},{"location":"part05_core_topic/chapter04/article0407/","text":"","title":"\u5217\u8868\u63a8\u5bfc\u5f0f\u3001\u751f\u6210\u5668\u8868\u8fbe\u5f0f\u3001\u5b57\u5178\u63a8\u5bfc\u5f0f"},{"location":"part05_core_topic/chapter04/article0408/","text":"","title":"\u672c\u7ae0\u5c0f\u7ed3"},{"location":"part05_core_topic/chapter05/article0501/","text":"Index \u00b6","title":"dict \u7684 abc \u7ee7\u627f\u5173\u7cfb"},{"location":"part05_core_topic/chapter05/article0501/#index","text":"","title":"Index"},{"location":"part05_core_topic/chapter05/article0502/","text":"","title":"dict \u7684\u5e38\u7528\u65b9\u6cd5"},{"location":"part05_core_topic/chapter05/article0503/","text":"","title":"dict \u7684\u5b50\u7c7b"},{"location":"part05_core_topic/chapter05/article0504/","text":"","title":"set \u548c frozenset"},{"location":"part05_core_topic/chapter05/article0505/","text":"","title":"dict \u548c set \u7684\u5b9e\u73b0\u539f\u7406"},{"location":"part05_core_topic/chapter05/article0506/","text":"","title":"\u672c\u7ae0\u5c0f\u7ed3"},{"location":"part05_core_topic/chapter06/article0601/","text":"Index \u00b6","title":"pythoon \u4e2d\u7684\u53d8\u91cf\u662f\u4ec0\u4e48\uff1f"},{"location":"part05_core_topic/chapter06/article0601/#index","text":"","title":"Index"},{"location":"part05_core_topic/chapter06/article0602/","text":"","title":"== \u548c is \u7684\u533a\u522b"},{"location":"part05_core_topic/chapter06/article0603/","text":"","title":"del \u8bed\u53e5\u548c\u5783\u573e\u56de\u6536"},{"location":"part05_core_topic/chapter06/article0604/","text":"","title":"\u4e00\u4e2a\u7ecf\u5178\u7684\u53c2\u6570\u9519\u8bef"},{"location":"part05_core_topic/chapter06/article0605/","text":"","title":"\u672c\u7ae0\u5c0f\u7ed3"},{"location":"part05_core_topic/chapter07/article0701/","text":"Index \u00b6","title":"property \u52a8\u6001\u5c5e\u6027"},{"location":"part05_core_topic/chapter07/article0701/#index","text":"","title":"Index"},{"location":"part05_core_topic/chapter07/article0702/","text":"","title":"__getattr__\u3001__getattribute__ \u9b54\u6cd5\u51fd\u6570"},{"location":"part05_core_topic/chapter07/article0703/","text":"","title":"\u5c5e\u6027\u63cf\u8ff0\u7b26\u548c\u5c5e\u6027\u67e5\u627e\u8fc7\u7a0b"},{"location":"part05_core_topic/chapter07/article0704/","text":"","title":"__new__ \u548c __init__ \u7684\u533a\u522b"},{"location":"part05_core_topic/chapter07/article0705/","text":"","title":"\u81ea\u5b9a\u4e49\u5143\u7c7b"},{"location":"part05_core_topic/chapter07/article0706/","text":"","title":"\u901a\u8fc7\u5143\u7c7b\u5b9e\u73b0 orm"},{"location":"part05_core_topic/chapter07/article0707/","text":"","title":"\u672c\u7ae0\u5c0f\u7ed3"},{"location":"part05_core_topic/chapter08/article0801/","text":"Index \u00b6","title":"python \u4e2d\u7684\u8fed\u4ee3\u534f\u8bae"},{"location":"part05_core_topic/chapter08/article0801/#index","text":"","title":"Index"},{"location":"part05_core_topic/chapter08/article0802/","text":"","title":"\u4ec0\u4e48\u662f\u8fed\u4ee3\u5668\u548c\u53ef\u8fed\u4ee3\u5bf9\u8c61"},{"location":"part05_core_topic/chapter08/article0803/","text":"","title":"\u751f\u6210\u5668\u51fd\u6570\u7684\u4f7f\u7528"},{"location":"part05_core_topic/chapter08/article0804/","text":"","title":"python \u662f\u5982\u4f55\u5b9e\u73b0\u751f\u6210\u5668\u7684"},{"location":"part05_core_topic/chapter08/article0805/","text":"","title":"\u751f\u6210\u5668\u5728 UserList \u4e2d\u7684\u5e94\u7528"},{"location":"part05_core_topic/chapter08/article0806/","text":"","title":"\u751f\u6210\u5668\u5982\u4f55\u8bfb\u53d6\u5927\u6587\u4ef6"},{"location":"part05_core_topic/chapter08/article0807/","text":"","title":"\u672c\u7ae0\u5c0f\u7ed3"},{"location":"part05_core_topic/chapter09/article0901/","text":"Index \u00b6","title":"HTTP\u3001Socket\u3001TCP \u6982\u5ff5"},{"location":"part05_core_topic/chapter09/article0901/#index","text":"","title":"Index"},{"location":"part05_core_topic/chapter09/article0902/","text":"","title":"socket \u548c server \u5b9e\u73b0\u901a\u4fe1"},{"location":"part05_core_topic/chapter09/article0903/","text":"","title":"socket \u5b9e\u73b0\u804a\u5929\u548c\u591a\u7528\u6237\u8fde\u63a5"},{"location":"part05_core_topic/chapter09/article0904/","text":"","title":"socket \u6a21\u62df http \u8bf7\u6c42"},{"location":"part05_core_topic/chapter09/article0905/","text":"","title":"\u672c\u7ae0\u5c0f\u7ed3"},{"location":"part05_core_topic/chapter10/article1001/","text":"Index \u00b6","title":"python \u4e2d\u7684 GIL"},{"location":"part05_core_topic/chapter10/article1001/#index","text":"","title":"Index"},{"location":"part05_core_topic/chapter10/article1002/","text":"","title":"\u591a\u7ebf\u7a0b\u7f16\u7a0b \u2014\u2014 threading"},{"location":"part05_core_topic/chapter10/article1003/","text":"","title":"\u7ebf\u7a0b\u95f4\u901a\u4fe1 \u2014\u2014 \u5171\u4eab\u53d8\u91cf\u548c Queue"},{"location":"part05_core_topic/chapter10/article1004/","text":"","title":"\u7ebf\u7a0b\u540c\u6b65 \u2014\u2014 Lock\u3001RLock"},{"location":"part05_core_topic/chapter10/article1005/","text":"","title":"\u7ebf\u7a0b\u540c\u6b65 \u2014\u2014 condition \u4f7f\u7528\u53ca\u6e90\u7801\u5206\u6790"},{"location":"part05_core_topic/chapter10/article1006/","text":"","title":"\u7ebf\u7a0b\u540c\u6b65 \u2014\u2014 Semaphore \u4f7f\u7528\u53ca\u6e90\u7801\u5206\u6790"},{"location":"part05_core_topic/chapter10/article1007/","text":"","title":"ThreadPoolExecutor \u7ebf\u7a0b\u6c60"},{"location":"part05_core_topic/chapter10/article1008/","text":"","title":"ThreadPoolExecutor \u6e90\u7801\u5206\u6790"},{"location":"part05_core_topic/chapter10/article1009/","text":"","title":"\u591a\u7ebf\u7a0b\u548c\u591a\u8fdb\u7a0b\u5bf9\u6bd4"},{"location":"part05_core_topic/chapter10/article1010/","text":"","title":"multiprocessing \u591a\u8fdb\u7a0b\u7f16\u7a0b"},{"location":"part05_core_topic/chapter10/article1011/","text":"","title":"\u8fdb\u7a0b\u95f4\u901a\u4fe1 \u2014\u2014 Queue\u3001Pipe\u3001Manager"},{"location":"part05_core_topic/chapter10/article1012/","text":"","title":"\u672c\u7ae0\u5c0f\u7ed3"},{"location":"part05_core_topic/chapter11/article1101/","text":"Index \u00b6","title":"\u5e76\u53d1\u3001\u5e76\u884c\u3001\u540c\u6b65\u3001\u5f02\u6b65\u3001\u963b\u585e\u3001\u975e\u963b\u585e"},{"location":"part05_core_topic/chapter11/article1101/#index","text":"","title":"Index"},{"location":"part05_core_topic/chapter11/article1102/","text":"","title":"IO \u591a\u8def\u590d\u7528 (select\u3001poll \u548c epoll)"},{"location":"part05_core_topic/chapter11/article1103/","text":"","title":"select+\u56de\u8c03+\u4e8b\u4ef6\u5faa\u73af\u83b7\u53d6 html"},{"location":"part05_core_topic/chapter11/article1104/","text":"","title":"\u56de\u8c03\u4e4b\u75db"},{"location":"part05_core_topic/chapter11/article1105/","text":"","title":"\u534f\u7a0b\u662f\u4ec0\u4e48"},{"location":"part05_core_topic/chapter11/article1106/","text":"","title":"\u751f\u6210\u5668\u8fdb\u9636 send\u3001close \u548c throw \u65b9\u6cd5"},{"location":"part05_core_topic/chapter11/article1107/","text":"","title":"\u751f\u6210\u5668\u8fdb\u9636 yield from"},{"location":"part05_core_topic/chapter11/article1108/","text":"","title":"\u751f\u6210\u5668\u5b9e\u73b0\u534f\u7a0b"},{"location":"part05_core_topic/chapter11/article1109/","text":"","title":"async\u548cawait"},{"location":"part05_core_topic/chapter11/article1110/","text":"","title":"\u672c\u7ae0\u5c0f\u7ed3"},{"location":"part05_core_topic/chapter12/article1201/","text":"Index \u00b6","title":"\u4e8b\u4ef6\u5faa\u73af"},{"location":"part05_core_topic/chapter12/article1201/#index","text":"","title":"Index"},{"location":"part05_core_topic/chapter12/article1202/","text":"","title":"task \u53d6\u6d88\u548c\u5b50\u534f\u7a0b\u8c03\u7528\u539f\u7406"},{"location":"part05_core_topic/chapter12/article1203/","text":"","title":"call_soon\u3001call_at\u3001call_later\u3001call_soon_threadsafe"},{"location":"part05_core_topic/chapter12/article1204/","text":"","title":"ThreadPollExecutor \u548c asycio \u5b8c\u6210\u963b\u585e IO \u8bf7\u6c42"},{"location":"part05_core_topic/chapter12/article1205/","text":"","title":"asyncio \u6a21\u62df http \u8bf7\u6c42"},{"location":"part05_core_topic/chapter12/article1206/","text":"","title":"future \u548c task"},{"location":"part05_core_topic/chapter12/article1207/","text":"","title":"asyncio \u540c\u6b65\u548c\u901a\u4fe1"},{"location":"part05_core_topic/chapter12/article1208/","text":"","title":"aiohttp \u5b9e\u73b0\u9ad8\u5e76\u53d1\u722c\u866b"},{"location":"part05_core_topic/chapter12/article1209/","text":"","title":"\u672c\u7ae0\u5c0f\u7ed3"},{"location":"part06_intermediate_note/effective_python/","text":"Index \u00b6","title":"Effective Python"},{"location":"part06_intermediate_note/effective_python/#index","text":"","title":"Index"},{"location":"part06_intermediate_note/fluent_python/","text":"Index \u00b6","title":"Fluent Python"},{"location":"part06_intermediate_note/fluent_python/#index","text":"","title":"Index"},{"location":"part06_intermediate_note/intermediate_python/","text":"Index \u00b6","title":"Intermediate Python"},{"location":"part06_intermediate_note/intermediate_python/#index","text":"","title":"Index"},{"location":"part06_intermediate_note/python_cookbook/","text":"Index \u00b6","title":"Python Cookbook"},{"location":"part06_intermediate_note/python_cookbook/#index","text":"","title":"Index"},{"location":"part07_essential_framework/","text":"Index \u00b6 \u00b6","title":"Index"},{"location":"part07_essential_framework/#index","text":"","title":"Index"},{"location":"part07_essential_framework/#_1","text":"","title":""},{"location":"part07_essential_framework/python_web/django/","text":"Index \u00b6","title":"Django"},{"location":"part07_essential_framework/python_web/django/#index","text":"","title":"Index"},{"location":"part07_essential_framework/python_web/fastapi/","text":"Index \u00b6","title":"FastAPI"},{"location":"part07_essential_framework/python_web/fastapi/#index","text":"","title":"Index"},{"location":"part07_essential_framework/python_web/flask/","text":"Index \u00b6","title":"Flask"},{"location":"part07_essential_framework/python_web/flask/#index","text":"","title":"Index"},{"location":"part07_essential_framework/python_web/plotly_dash/","text":"Dash \u5b9e\u73b0\u4ea4\u4e92\u5f0f\u5c55\u793a\u754c\u9762 \u00b6","title":"Dash"},{"location":"part07_essential_framework/python_web/plotly_dash/#dash","text":"","title":"Dash \u5b9e\u73b0\u4ea4\u4e92\u5f0f\u5c55\u793a\u754c\u9762"},{"location":"part07_essential_framework/python_web/tornado/","text":"Index \u00b6","title":"Tornado"},{"location":"part07_essential_framework/python_web/tornado/#index","text":"","title":"Index"},{"location":"part08_python_in_action/china_census_analysis/01_introduction/","text":"1 \u00b6","title":"introduction"},{"location":"part08_python_in_action/china_census_analysis/01_introduction/#1","text":"","title":"1"},{"location":"part08_python_in_action/performance_marketing_report/01_introduction/","text":"1 \u00b6","title":"introduction"},{"location":"part08_python_in_action/performance_marketing_report/01_introduction/#1","text":"","title":"1"},{"location":"part08_python_in_action/performance_marketing_report/02_environment/","text":"1 \u00b6","title":"environment"},{"location":"part08_python_in_action/performance_marketing_report/02_environment/#1","text":"","title":"1"},{"location":"part08_python_in_action/performance_marketing_report/03_dash_basics/","text":"1 \u00b6","title":"dash basics"},{"location":"part08_python_in_action/performance_marketing_report/03_dash_basics/#1","text":"","title":"1"},{"location":"part08_python_in_action/performance_marketing_report/04_multi-page_application/","text":"1 \u00b6","title":"multi-page"},{"location":"part08_python_in_action/performance_marketing_report/04_multi-page_application/#1","text":"","title":"1"},{"location":"part08_python_in_action/performance_marketing_report/05_data_selector_element/","text":"1 \u00b6","title":"data-selector"},{"location":"part08_python_in_action/performance_marketing_report/05_data_selector_element/#1","text":"","title":"1"},{"location":"part08_python_in_action/performance_marketing_report/06_first_data_table/","text":"1 \u00b6","title":"first data table"},{"location":"part08_python_in_action/performance_marketing_report/06_first_data_table/#1","text":"","title":"1"},{"location":"part08_python_in_action/performance_marketing_report/07_donwload_link/","text":"1 \u00b6","title":"download link"},{"location":"part08_python_in_action/performance_marketing_report/07_donwload_link/#1","text":"","title":"1"},{"location":"part08_python_in_action/performance_marketing_report/08_second_data_table/","text":"1 \u00b6","title":"second data table"},{"location":"part08_python_in_action/performance_marketing_report/08_second_data_table/#1","text":"","title":"1"},{"location":"part08_python_in_action/performance_marketing_report/09_update_graphs_function/","text":"1 \u00b6","title":"update graph function"},{"location":"part08_python_in_action/performance_marketing_report/09_update_graphs_function/#1","text":"","title":"1"},{"location":"part08_python_in_action/performance_marketing_report/10_update_graph_functions/","text":"1 \u00b6","title":"update graph function"},{"location":"part08_python_in_action/performance_marketing_report/10_update_graph_functions/#1","text":"","title":"1"},{"location":"part08_python_in_action/performance_marketing_report/11_plotly_graph_tools/","text":"1 \u00b6","title":"plotly graph tools"},{"location":"part08_python_in_action/performance_marketing_report/11_plotly_graph_tools/#1","text":"","title":"1"},{"location":"part08_python_in_action/performance_marketing_report/12_deploy_application/","text":"1 \u00b6","title":"deployment"},{"location":"part08_python_in_action/performance_marketing_report/12_deploy_application/#1","text":"","title":"1"},{"location":"part08_python_in_action/performance_marketing_report/13_wrapping_up/","text":"1 \u00b6","title":"wrapping up"},{"location":"part08_python_in_action/performance_marketing_report/13_wrapping_up/#1","text":"","title":"1"},{"location":"part08_python_in_action/performance_marketing_report/14_resources/","text":"1 \u00b6","title":"resources"},{"location":"part08_python_in_action/performance_marketing_report/14_resources/#1","text":"","title":"1"},{"location":"part09_source_code_analysis/","text":"Index \u00b6 500lines \u00b6 bottle \u00b6 request \u00b6 flask \u00b6","title":"Index"},{"location":"part09_source_code_analysis/#index","text":"","title":"Index"},{"location":"part09_source_code_analysis/#500lines","text":"","title":"500lines"},{"location":"part09_source_code_analysis/#bottle","text":"","title":"bottle"},{"location":"part09_source_code_analysis/#request","text":"","title":"request"},{"location":"part09_source_code_analysis/#flask","text":"","title":"flask"},{"location":"part10_connection_and_expansion/","text":"Index \u00b6 golang \u00b6 javascript \u00b6 java \u00b6 C/C++ \u00b6","title":"python \u62d3\u5c55"},{"location":"part10_connection_and_expansion/#index","text":"","title":"Index"},{"location":"part10_connection_and_expansion/#golang","text":"","title":"golang"},{"location":"part10_connection_and_expansion/#javascript","text":"","title":"javascript"},{"location":"part10_connection_and_expansion/#java","text":"","title":"java"},{"location":"part10_connection_and_expansion/#cc","text":"","title":"C/C++"},{"location":"part11_ecological_information/","text":"Index \u00b6","title":"Python \u751f\u6001"},{"location":"part11_ecological_information/#index","text":"","title":"Index"}]}